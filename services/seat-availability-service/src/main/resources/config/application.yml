
spring:
  application:
    name: seat-availability-service
  profiles:
    active: "@profiles.active@"

  jpa:
    open-in-view: false
    properties:
      hibernate:
        show_sql: true
        format_sql: false
        jdbc:
          time_zone: UTC
          ddl-auto: validate
        hibernate:
          # Hibernate only checks if the current schema matches the entity
          # If it does not match, the application will not start
          # Do not make any changes to the schema
          ddl-auto: validate
  sql:
    init:
      mode: never

  rabbitmq:
    host: ${RABBIT_MQ_HOST}
    virtual-host: ${RABBIT_MQ_VIRTUAL_HOST}
    port: ${RABBIT_MQ_PORT}
    username: ${RABBIT_MQ_USERNAME}
    password: ${RABBIT_MQ_PASSWORD}
    exchange:
      direct: amq.direct
    producer:
      reply-timeout: 60000
    consumer:
      max-concurrent-consumer: 2
      concurrent-consumer: 2
      prefetch-count: 10
    queues:
      CHECK_SEAT_AVAILABILITY_COMMAND:
        name: queue.seats.availability.command
        routing-key: routingKey.seats.availability.command
      CHECK_SEAT_AVAILABILITY_REPLY:
        name: queue.seats.availability.reply
        routing-key: routingKey.seats.availability.reply
      CONFIRM_SEAT_COMMAND:
        name: queue.seats.confirm.command
        routing-key: routingKey.seats.confirm.command
      CONFIRM_SEAT_REPLY:
        name: queue.seats.confirm.reply
        routing-key: routingKey.seats.confirm.reply
      RESERVE_SEAT_COMMAND:
        name: queue.seats.reserve.command
        routing-key: routingKey.seats.reserve.command
      RESERVE_SEAT_REPLY:
        name: queue.seats.reserve.reply
        routing-key: routingKey.seats.reserve.reply

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: always
