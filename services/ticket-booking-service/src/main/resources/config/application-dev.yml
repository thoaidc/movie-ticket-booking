logging:
  level:
    root: debug
    vn.ptit.moviebooking: debug
  charset:
    console: UTF-8
    file: UTF-8
  # Custom properties to define logs file paths according to different profiles
  file-path: mnt/logs

spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/hdv_ticket_booking?serverTimezone=UTC
    username: admin_hdv_ticket_booking
    password: 123456a@

  jpa:
    properties:
      hibernate:
        show_sql: true

  rabbitmq:
    host: ${RABBIT_MQ_HOST}
    virtual-host: ${RABBIT_MQ_VIRTUAL_HOST}
    port: ${RABBIT_MQ_PORT}
    username: ${RABBIT_MQ_USERNAME}
    password: ${RABBIT_MQ_PASSWORD}
    exchange:
      direct: amq.direct
    producer:
      reply-timeout: 60000
    consumer:
      max-concurrent-consumer: 2
      concurrent-consumer: 2
      prefetch-count: 10
    queues:
      MOVIE_VALIDATE_COMMAND:
        name: queue.movies.command
        routing-key: routingKey.movies.command
      MOVIE_VALIDATE_REPLY:
        name: queue.movies.reply
        routing-key: routingKey.movies.reply
      CHECK_SEAT_AVAILABILITY_COMMAND:
        name: queue.seats.command
        routing-key: routingKey.seats.command
      CHECK_SEAT_AVAILABILITY_REPLY:
        name: queue.seats.reply
        routing-key: routingKey.seats.reply
      VERIFY_CUSTOMER_COMMAND:
        name: queue.customers.command
        routing-key: routingKey.customers.command
      VERIFY_CUSTOMER_REPLY:
        name: queue.customer.reply
        routing-key: routingKey.customer.reply
      PAYMENT_PROCESS_COMMAND:
        name: queue.payments.command
        routing-key: routingKey.payments.command
      PAYMENT_PROCESS_REPLY:
        name: queue.payments.reply
        routing-key: routingKey.payments.reply
      NOTIFICATION:
        name: queue.notifications
        routing-key: routingKey.notifications

server:
  port: 8105

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
    healthcheck:
      enabled: true
    register-with-eureka: true
    fetch-registry: true
  instance:
    preferIpAddress: true
    lease-renewal-interval-in-seconds: 5  # Heartbeat frequency
    lease-expiration-duration-in-seconds: 60  # Expiration time if no heartbeat received
    instanceId: ${spring.application.name}:${server.port}
