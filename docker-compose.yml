
services:
  # Service Discovery
  hdv-service-registry:
    container_name: hdv-service-registry
    build: ./services/discovery-service
    ports:
      - "8761:8761"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://hdv-service-registry:8761/eureka/
    networks:
      - hdv-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # API Gateway
  hdv-api-gateway:
    container_name: hdv-api-gateway
    build: ./gateway
    ports:
      - "8080:8080"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://hdv-service-registry:8761/eureka/
    depends_on:
      hdv-service-registry:
        condition: service_healthy
    networks:
      - hdv-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # MySQL database for each service
  hdv-movie-db:
    image: mysql:8.0.40-oracle
    container_name: hdv-movie-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: hdv_movie
    ports:
      - "3300:3306"
    volumes:
      - hdv_movie_data:/var/lib/mysql
    networks:
      - hdv-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot" ]
      interval: 10s
      timeout: 10s
      retries: 10

  hdv-seat-availability-db:
    image: mysql:8.0.40-oracle
    container_name: hdv-seat-availability-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: hdv_seat_availability
    ports:
      - "3301:3306"
    volumes:
      - hdv_seat_availability_data:/var/lib/mysql
    networks:
      - hdv-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot" ]
      interval: 10s
      timeout: 10s
      retries: 10

  hdv-customer-db:
    image: mysql:8.0.40-oracle
    container_name: hdv-customer-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: hdv_customer
    ports:
      - "3302:3306"
    volumes:
      - hdv_customer_data:/var/lib/mysql
    networks:
      - hdv-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot" ]
      interval: 10s
      timeout: 10s
      retries: 10

  hdv-payment-db:
    image: mysql:8.0.40-oracle
    container_name: hdv-payment-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: hdv_payment
    ports:
      - "3303:3306"
    depends_on:
      hdv-customer-db:
        condition: service_healthy
    volumes:
      - hdv_payment_data:/var/lib/mysql
    networks:
      - hdv-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot" ]
      interval: 10s
      timeout: 10s
      retries: 10

  hdv-ticket-booking-db:
    image: mysql:8.0.40-oracle
    container_name: hdv-ticket-booking-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: hdv_ticket_booking
    ports:
      - "3304:3306"
    depends_on:
      hdv-payment-db:
        condition: service_healthy
    volumes:
      - hdv_ticket_booking_data:/var/lib/mysql
    networks:
      - hdv-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot" ]
      interval: 10s
      timeout: 10s
      retries: 10

  hdv-notification-db:
    image: mysql:8.0.40-oracle
    container_name: hdv-notification-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: hdv_notification
    ports:
      - "3305:3306"
    volumes:
      - hdv_notification_data:/var/lib/mysql
    networks:
      - hdv-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot" ]
      interval: 10s
      timeout: 10s
      retries: 10

  # Schema generation service for databases
  hdv-db-initializer:
    image: mysql:8.0.40-oracle
    container_name: hdv-db-initializer
    volumes:
      - ./scripts:/scripts  # Mount the ./scripts directory from the project to docker container
    command: "bash /scripts/init.sh"
    environment:
      MYSQL_ROOT_PASSWORD: root
    depends_on:
      hdv-movie-db:
        condition: service_healthy
      hdv-seat-availability-db:
        condition: service_healthy
      hdv-customer-db:
        condition: service_healthy
      hdv-payment-db:
        condition: service_healthy
      hdv-ticket-booking-db:
        condition: service_healthy
      hdv-notification-db:
        condition: service_healthy
    networks:
      - hdv-network
    restart: no  # Run once and then stop

  # Microservices
  hdv-movie-service:
    container_name: hdv-movie-service
    build: ./services/movie-service
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://hdv-movie-db:3306/hdv_movie?useSSL=false&allowPublicKeyRetrieval=true
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://hdv-service-registry:8761/eureka/
    depends_on:
      hdv-movie-db:
        condition: service_healthy
      hdv-service-registry:
        condition: service_healthy
      hdv-api-gateway:
        condition: service_healthy
    networks:
      - hdv-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  hdv-seat-availability-service:
    container_name: hdv-seat-availability-service
    build: ./services/seat-availability-service
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://hdv-seat-availability-db:3306/hdv_seat_availability?useSSL=false&allowPublicKeyRetrieval=true
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://hdv-service-registry:8761/eureka/
    depends_on:
      hdv-seat-availability-db:
        condition: service_healthy
      hdv-service-registry:
        condition: service_healthy
      hdv-api-gateway:
        condition: service_healthy
    networks:
      - hdv-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  hdv-customer-service:
    container_name: hdv-customer-service
    build: ./services/customer-service
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://hdv-customer-db:3306/hdv_customer?useSSL=false&allowPublicKeyRetrieval=true
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://hdv-service-registry:8761/eureka/
    depends_on:
      hdv-customer-db:
        condition: service_healthy
      hdv-service-registry:
        condition: service_healthy
      hdv-api-gateway:
        condition: service_healthy
    networks:
      - hdv-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  hdv-payment-service:
    container_name: hdv-payment-service
    build: ./services/payment-service
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://hdv-payment-db:3306/hdv_payment?useSSL=false&allowPublicKeyRetrieval=true
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://hdv-service-registry:8761/eureka/
    depends_on:
      hdv-payment-db:
        condition: service_healthy
      hdv-service-registry:
        condition: service_healthy
      hdv-api-gateway:
        condition: service_healthy
      hdv-customer-service:
        condition: service_healthy
    networks:
      - hdv-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  hdv-ticket-booking-service:
    container_name: hdv-ticket-booking-service
    build: ./services/ticket-booking-service
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://hdv-ticket-booking-db:3306/hdv_ticket_booking?useSSL=false&allowPublicKeyRetrieval=true
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://hdv-service-registry:8761/eureka/
    depends_on:
      hdv-ticket-booking-db:
        condition: service_healthy
      hdv-service-registry:
        condition: service_healthy
      hdv-api-gateway:
        condition: service_healthy
      hdv-movie-service:
        condition: service_healthy
      hdv-seat-availability-service:
        condition: service_healthy
      hdv-payment-service:
        condition: service_healthy
    networks:
      - hdv-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  hdv-notification-service:
    container_name: hdv-notification-service
    build: ./services/notification-service
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://hdv-notification-db:3306/hdv_notification?useSSL=false&allowPublicKeyRetrieval=true
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://hdv-service-registry:8761/eureka/
    depends_on:
      hdv-notification-db:
        condition: service_healthy
      hdv-service-registry:
        condition: service_healthy
      hdv-api-gateway:
        condition: service_healthy
      hdv-ticket-booking-service:
        condition: service_healthy
    networks:
      - hdv-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  init-seats-of-shows-caller:
    image: curlimages/curl:latest
    container_name: hdv-init-seats-of-shows
    volumes:
      - ./scripts:/scripts  # Mount the ./scripts directory from the project to docker container
    entrypoint: ["sh", "/scripts/init_seats_shows.sh"]
    depends_on:
      hdv-movie-db:
        condition: service_healthy
      hdv-seat-availability-db:
        condition: service_healthy
      hdv-service-registry:
        condition: service_healthy
      hdv-api-gateway:
        condition: service_healthy
      hdv-movie-service:
        condition: service_healthy
      hdv-seat-availability-service:
        condition: service_healthy
    networks:
      - hdv-network
    restart: no

  # Angular frontend service
  hdv-frontend:
    container_name: hdv-frontend
    build: ./frontend
    ports:
      - "4200:80"
    depends_on:
      hdv-service-registry:
        condition: service_healthy
      hdv-api-gateway:
        condition: service_healthy
      hdv-movie-service:
        condition: service_healthy
      hdv-seat-availability-service:
        condition: service_healthy
      hdv-customer-service:
        condition: service_healthy
      hdv-payment-service:
        condition: service_healthy
      hdv-ticket-booking-service:
        condition: service_healthy
      hdv-notification-service:
        condition: service_healthy
    networks:
      - hdv-network
    restart: unless-stopped

# Define networks
networks:
  hdv-network:
    driver: bridge

# Define volumes
volumes:
  hdv_movie_data:
  hdv_seat_availability_data:
  hdv_customer_data:
  hdv_payment_data:
  hdv_ticket_booking_data:
  hdv_notification_data:
